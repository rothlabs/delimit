[package]
    name = "client"
    version = "0.1.0"
    authors = ["Julian Erickson <julian@rothlabs.com>"]
    edition = "2021"
    # resolver = "2"

[lib]
    crate-type = ["cdylib", "rlib"]

[features]
    default = ["console_error_panic_hook"]

[dependencies]
    wasm-bindgen = "0.2.93"
    console_error_panic_hook = { version = "0.1.7", optional = true }
    getrandom = {version = "0.2", features = ["js"]}
    # # futures
        # wasm-bindgen-futures = "0.4.43"
    #     futures = "0.3.3"
    # delimit 
        graph = { path = "../../graph", features = ["oneThread"], default-features = false } 
        text = { path = "../../text" }
        gpu = { path = "../../gpu" }

[dependencies.web-sys] 
    version = "0.3.70"
    features = [
        'Window', 
        'Document', 
        'HtmlCanvasElement',
        'OffscreenCanvas',
        'WebGlRenderingContext', 
        'WebGl2RenderingContext', 
        'WebGlProgram', 
        'WebGlShader', 
        'WebGlBuffer', 
        'WebGlFramebuffer', 
        'WebGlVertexArrayObject',
        'WebGlUniformLocation',
        'WebGlTexture'
    ]

[dev-dependencies]
    wasm-bindgen-test = "0.3.43"

    # The `console_error_panic_hook` crate provides better debugging of panics by
    # logging them with `console.error`. This is great for development, but requires
    # all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
    # code size when deploying.